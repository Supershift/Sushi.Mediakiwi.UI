@import "./variables";
@import "./functions";

/// Mixin to prefix a property
/// @author Hugo Giraudel
/// @param {String} $property - Property name
/// @param {*} $value - Property value
/// usage @include vendor-prefix('box-sizing', 'border-box');
@mixin prefix($property, $value, $important: false) {
    @each $prefix in ("webkit", "moz", "ms", "o") {
        #{"-" + $prefix + "-" + $property}: $value;
    }

    // Output standard non-prefixed declaration
    @if $important {
        #{$property}: $value !important;
    }

    @else {
        #{$property}: $value;
    }
}

@mixin container {
    width: $grid-xxl;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
    float: none;
    max-width: 100%;
    padding: 0;
}

@mixin clear {
    &::after {
        content: "";
        display: block;
        clear: both;
    }
}

@mixin vertical-middle {
    position: relative;
    top: 50%;
    @include prefix("transform", translateY(-50%));
}

@mixin button-color($color, $hover, $direction: toRight) {
    background: linear-gradient(to right, $hover 50%, $color 50%);
    background-size: 201% 100%;
    background-position: right bottom;
    @include prefix(transition, all 0.3s ease-out);

    &:hover {
        background-position: left bottom;
    }
}

/* ANIMTAIONS */
/// Apply the standard animation a property
@mixin animation($property: all, $timing: $animation-timing-m, $progression: $animation-progression-standard) {
    $animation: #{$property} #{$timing} #{$progression};
    @include prefix(transition, $animation);
}

@mixin animation-standard($property: all) {
    @include animation($property, $animation-timing-s, $animation-progression-standard);
}

@mixin font($font-size, $line-height, $margin: initial, $font-family: $font-primary) {
    font-family: $font-family;
    margin: $margin;

    $line-heigt-unit: get-unit($line-height);

    @if ($line-heigt-unit == "rem") {
        @include pixel-fallback(line-height, $line-height);
    }

    @else {
        @include rem-fallback(line-height, $line-height);
    }

    $font-size-unit: get-unit($fontSize);

    @if ($font-size-unit == "rem") {
        @include pixel-fallback(font-size, $font-size);
    }

    @else {
        @include rem-fallback(font-size, $font-size);
    }
}

/// Mixin to include PX and REM unit to a property
/// @param {String} $property - Property name
/// @param {*} $value - Property value
@mixin rem-fallback($property, $value-in-pixels, $important: false) {
    @if ($value-in-pixels != "initial") {
        #{$property}: $value-in-pixels !important;
    }

    @else {

        // Output standard non-prefixed declaration
        @if $important {
            #{$property}: convert-to-rem($value-in-pixels) !important;
            #{$property}: $value-in-pixels !important;
        }

        @else {
            #{$property}: convert-to-rem($value-in-pixels);
            #{$property}: $value-in-pixels;
        }
    }
}

/// Mixin to include PX and REM unit to a property
/// @param {String} $property - Property name
/// @param {*} $value - Property value
@mixin pixel-fallback($property, $value-in-rem, $important: false) {

    // Output standard non-prefixed declaration
    @if $important {
        #{$property}: convert-to-px($value-in-rem) !important;
        #{$property}: $value-in-rem !important;
    }

    @else {
        #{$property}: convert-to-px($value-in-rem);
        #{$property}: $value-in-rem;
    }
}

/// Mixin to display media queries with MIN-WIDTH based on a the existing breakpoints
/// @author Luigi Arends
/// @param {String} $breakpoint - Property value
/// @require $breakpoints
@mixin media-breakpoint-up($breakpoint) {
    // Only use existing breakpoint
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }
    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, you can only use existing breakpoints and `#{$breakpoint}` doesn't exist. "
            + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

/// Mixin to display media queries with MAX-WIDTH based on a the existing breakpoints
/// @author Luigi Arends
/// @param {String} $breakpoint - Property value
/// @require $breakpoints
@mixin media-breakpoint-down($breakpoint) {
    // Only use existing breakpoint
    @if map-has-key($breakpoints, $breakpoint) {
        @media (max-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }
    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, you can only use existing breakpoints and `#{$breakpoint}` doesn't exist. "
            + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

/// Mixin for the row of a grid system to be used in conjuction with the columns throughout the application
/// @author Luigi Arends
@mixin row {
    .row {
        display: flex;
        align-items: baseline;
        flex-wrap: wrap;

        --bs-gutter-x: 1.5rem;
        --bs-gutter-y: 0;
        margin-top: calc(var(--bs-gutter-y) * -1);
        margin-left: calc(var(--bs-gutter-x) * 0);
        margin-right: calc(var(--bs-gutter-x) * -0.5);
        >* {
            width: 100%;
            margin-top: var(--bs-gutter-y);
            padding-right: calc(var(--bs-gutter-x) * 0.5);
            padding-left: calc(var(--bs-gutter-x) * 0);
        }
        @content;
    }
}

/// Mixin for a generic column of a grid system to be used through the application
/// @author Luigi Arends
/// @param {String} $size - Property value
/// @require $breakpoints
@mixin col {
    .col {
        flex: 1 0 0%;
        @content;
    }
}

/// Mixin for the columns of a grid system to be used through the application
/// @author Luigi Arends
/// @param {String} $size - Property value
/// @require $grid-layout-columns
@mixin col-fn($size) {
    @if map-has-key($grid-layout-columns , $size) {
        .col-#{$size} {
            flex: 1 0 map-get($grid-layout-columns, $size);
            @content;
        }
    }
    // If the key doesn't exist in the map
     @else {
        @warn "Unfortunately, you can only use existing size and `#{$size}` doesn't exist. "
            + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}
